{"layout": "post", "title": "html", "published": "Mar 09, 2021", "author": "yonatan119", "tags": "html", "timestamp": 1615296634, "location": "github.md.json", "content": "- [git/hub]\n * [Pre Install](#Pre-Install)\n * [Installing Git](#Installing-Git)\n * [Creating a Local Repository](#Creating-a-Local-Repository)\n * [Github](#Github)\n * [Cloning](#Cloning)\n * [Cheat Sheet](Cheat-Sheet)\n\n# *Pre Install*\nWe will use a code editor to ease our work with \n\nLets install it\n\nWindows users:\n\n install at: https://notepad-plus-plus.org/download/v7.5.9.html \n\nOr just google \u201cNotepad++\u201d and take the latest version.\n\nMac users:\n\n install Atom editor: https://atom.io/ \n\nWhat is Git?\nit is a version-control.\nbasicly it is a way to save our lines of code in one place on our local computer.\nWe use Github to save our code on the web.\nthere is alot more to it, you can read about it [here](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)\n\nLesson Overview\nIn this lesson we\u2019re going to:\n\n- [Install-Git-and-create-our-first-local-repository](#install-git-and-create-our-first local-repository)\n* [Create a repo on Github.](#create-a-repo-on-github)\n* [Upload our local repo files to Github.](#upload-our-local-repo-files-to-github)\n* [Make and revert changes.](#make-and-revert-changes)\n\n\n# Installing Git\n\nDownload it from [here](https://git-scm.com/downloads) and install it using the default settings. If you are having problems feel free to reach out in our whatsapp group!\n\n\n**Important Installation Instructions**\n\nstart the installation and wait until you get to the page of selecting the text editor:\n\nMake sure to select Notepad++ or atom as Git\u2019s default editor.\n\nSetup\nFirst, let\u2019s open the cmd.\n\nWindows Users\n\nIn the search panel type: \n\ngit bash\n\nMac\n\nIn the search panel type:\n\nTerminal\n\nAfter we opened our editor, lets start using it!\n*note* every line automatically starts with a dollar sign, this is necessary but is automatic in this editor\n\nTo make sure git is installed correctly, let's type:\n\n```javascript\ngit --version\n```\n\nIf you see a git version, that means it is installed correctly.\n\nTo setup Git we need to configure our username and email so lets run the following commands.\n\n```javascript\ngit config --global user.name \"Your username\"\ngit config --global user.email \"your_email@gmaill.com\"\n```\n\nCongratulations!\nOur next step is to create a local repository\n\n# *Creating a Local Repository*\n\nA repository or Repo is where our code lives, both on our computer and on a host computer (Github, which we will use later on).\n\nWe will start by creating the local repository, that is located on our computer.\n\nlets enter our css-html project directory.\ntype in your editor:\n\n```javascript\nls\n```\n\nsee which folders you have in the current directory and enter the folder which contains your project.\nfor example, to reach my project folder I will write this:\n\n```javascript\nls\ncd desktop\ncd code\ncd week1\ncd css-html project\n```\n\nNow we want Git to keep track of all the files inside our directory\n*note* A repository is just a storage space where Git can keep track of all files inside it.\n\nTo make this happen we need to write the following code, make sure you are in the directory which contains your projects folders.\n\n```javascript\ngit init\n```\n\nYou should see a message that says something like \"Initialized empty Git repository in...\"\nThis means Git is now keeping track of the folders, we need to do this step only once for each directory.\n\nNow we can add files, update them and update the remote repository.\n\n# *Github*\n\nI think we are ready to move our Git project who lives locally to github.com.\nthis way other developers can see it, contribute to it, fork it, clone it and most importantly, it will serve as a backup if needed.\n\n*Creating a repository on github*\n* [x]Go to github.com and log in to your account.\n* [x]Go to your profile and click the \"Repositories\" tab.\n* [x]Click the big green button that says \"New\".\n* [x]give your project a name.\n* [x]If your creativity needs helps, name the project:\n* [x]\"Css-Html\"\n* [x]Lastly, click \"create repository\".\n\nThe instuctions on the next screen can be a little confusing so stick to this lesson and I promise it will work out.\n\nInside your editor\n*note* make sure its in the projects directory.\nwrite this command:\n\n```javascript\ngit status\n```\n\nthis will show you the status of all changed files in this directory.\n\nwe need to do a couple more steps:\n\n1. add our changed files to our git.\n2. save these changes (commit) with an explanation \n3. add a remote origin to github\n4. push our local git changes to our github.\n\nStep 1:\nwhen you typed the command \"git status\" you probably saw some red lines, each line is a changed file, adding those files to our git will turn the lines to green!\nlets do this by writing this command in our editor:\n\n```javascript\ngit add .\n```\n\nwe are adding to git everything that has changed, you can add only a certain file by switching the \".\" to a file name like this:\n\n```javascript\ngit add index.html\n```\n\nstep 2:\nAfter adding the changes on step 1 we would like to commit to the changes with an explanation of what we are commiting we do it using the commit command like this:\n\n```javascript\ngit commit -m \"Initial commit\"\n```\n\nthis commits all the changes we added on step 1.\n\nStep 3:\nto connect between our local git to our github repo we need to go back to our repo in github, copy the URL at the top, head back to your command line, make sure you are in your project folder and run the command below. Just swap \"YOUR_URL\" for the URL you just copied.\n\n```javascript\ngit remote add origin YOUR_URL\n```\n\nThis command just added a reference to a \"remote repository\" to our local repository.\n\nStep 4:\nOur final step, after connecting between our local repo and our github repo we need to push all the changes we commited with this line of code:\n\n```javascript\ngit push origin master\n```\n\nThe command is telling Git to \"push our project to the origin repo's master branch\".\nWe'll talk more about branches in the future.\nNow if you go back to Github and refresh your repo's page, you will see your files!\n\nCongratulations!!\n\nlets change something in our code and see how we update it in our github.\n\nfirst things first, go to your html.index and change one word in it.\nafterwards enter the command:\n\n```javascript\ngit status\n```\n\nagain, you can see a red line who represents the file changes (index.html).\n\nnow, these are very *important steps*\nyou enter 3 commands that we learnt\n\n```javascript\ngit add .\n```\n\n```javascript\ngit commit -m \"YOUR_EXPLANATION\"\n```\n\n```javascript\ngit push origin master\n```\n\nCheck your Github...\nAmazing.\n\n\n# *Cloning*\n\nClick this [link](https://github.com/yonatan119/Fork) to navigate to the repo.\n\nTo fork this repo you need to:\n\nClick the button in the top right that says \"fork\"...\n\nThen select your profile.\n\nGitHub has now made a copy of our repository on you your profile.\n\nNow click \"Clone or download\" and copy the URL that is displayed.\n\nNow, open your terminal and navigate to wherever you're storing your code - for example code/week1/.\n\nType\n\n```javascript\n git clone <PasteURLHere> \n```\n\n(of course you need to replace \"PasteURLHere\" with the URL you just copied):\n\nRun the command (press enter). This will create a new folder on your computer. called Fork.\n\ncd into that folder like normal and open it in vsCode (or the editor of your choice) to start working with it!\n\nWhen you clone a github repo it will also set up a remote called \"origin\" so there is no need to do the whole git remote add origin ... thing.\n\nBy the way, you do not always have to fork repositories. If you're working on an existing repository and contributing to it, it's enough to just clone it so you have local access to it. Then you make your changes, and push it back to the original repo.\n\nGenerally we will only fork repos if we want to create something entirely new based off something existing.\n\n\n# *Cheat Sheet*\nCreate git repo Flow\n\nCreate empty directory: mkdir <name> \n\nNavigate to directory: cd <path>\n\nCreate a git repo in the current folder:  git init\n\nAdd a remote repository called origin with a link to your github repo: git remote add origin <link to remote repo>\n\nGit Commit and Push\n\nFirst we have to add: git add .\n\nCommit: git commit \u2013m \"this is my commit message\"\n\nGit pull: git pull origin master\n\nGit push: git push origin master\n\nBasic Commands\n\nWorking directory status: git status\n\nSee list of commits: git log"}