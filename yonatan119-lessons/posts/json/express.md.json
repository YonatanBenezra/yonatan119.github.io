{"layout": "post", "title": "Express", "published": "Mar 23, 2021", "author": "yonatan119", "tags": "express", "timestamp": 1616517034, "location": "express.md.json", "content": "# **Express and servers**\n\nLet's talk about servers before getting to express.\nFirst, what is a server?  \nA server is a physical machine.  \nany data, code, and program, is stored or executing on a physical machine somewhere on the ground (or underwater), nothing is in an actual cloud or in the sky - yet.  \nWe use servers to serve data such as files, images or videos - what you see on a webpage is mostly being served to you from some server, somewhere.  \nsome important notes about servers:\n- There can be thousands of servers serving the same data/files - but there will virtually always be more clients than servers, and the server will always serve some information to the clients.\n- servers should be stateless, this means that the server itself does not keep any information about the client.\nlets make the second note clear, because it is very important.  \nAny communication between the server and client is a one-time deal, and should include all the necessary information to complete a transaction.\n*The server may receive data from the client, then store that data in a database but it should never \"keep a state\" or \"remember\" anything about the client.*\nA valid request-response cycle is when the client requests for data and the server optionally does something, then sends a response in return.  \nWe will see plenty examples further on the course.\n\nAlright, we've been teasing servers for a while. Now it's time to actually build a real one. It will still run on localhost (your machine) for now, but it will be a real server.\n\n- The express package\n- Routes\n- Parameters\n\n**EXPRESS**\nExpress is an NPM package that allows us to create servers easily.  \nNPM is the world's largest software library, it basically lets you install packages easily.\nso go ahead and open a new directory and create a file named \"server.js\". go to this directory in the terminal and write:\n\n```javascript\nnpm install express\n```\n\ninside of your server.js file add to the top\n\n```javascript\nconst express = require('express')\n```\n\nWe need to require every NPM package we want to use.\nBy convention, we invoke express and store its value in a variable called \"app\" or \"server\":\n\n```javascript\nconst app = express()\n```\n\nOne of the more method we will use is the listen method. We invoke it like this:\n\n```javascript\nconst port = 3000\napp.listen(port, function(){\n    console.log(`Running server on port ${port}`)\n})\n```\n\nNow - in your terminal, in the same directory where this file is - run the file:\n```javascript\nnode server.js\n```\nThis will start a server that is listening on port 3000 (notice the callback function that gets invoke after the server starts running).  \nYou are probably wondering what the server is listening to, so the basic answer is - requests.  servers are responsive entities, they listen for requests and only act when asked to.  \nThe requests can come from wherever like browsers, apps, code.  \nThe server will respond, it doesn't care who is asking.  \nThis piece of code goes at the bottom of our server.js file - everything we add from now one should come before that.\n\nLets go to localhost:3000, we should see an error \"Cannot GET /\".  \nThe reason for this error, is we are not doing anything in our server.js file except run the server so when we try to go to localhost:3000, the browser is making a GET request and receives nothing.\nAdd the following code to your file before the app.listen section:\n\n```javascript\napp.get('/', function (request, response) {\n    console.log(\"Someone is coming!\")\n})\n```\n\nNow, whenever the browser (or anyone) tries to visit localhost:3000/,our server invokes this callback function with these two parameters - we'll talk about these parameters and what \"/\" means in a minute.\nlets see this happening, restart your server by saving (Ctrl + C) then in your terminal write \n\n```javascript\nnode server.js\n```\n\nrefresh the page.  \nWe see nothing on the browser! but... if we go back to our terminal we should see our console \"Someone is coming!  \nBut if you look closely at the browser, you'll see that the page is forever loading. This happens because the client (the browser) has made a request, but the server never made a response! The request-response cycle has not ended! And so our client will wait forever!  \nWe don't want our client to keep on waiting forever so lets send a response.  \n\n```javascript\napp.get('/', function (request, response) {\n    console.log(\"Someone is coming!\")\n    response.send(\"Wont keep you waiting..\")\n})\n```\n\nWe're taking advantage of the response object to invoke the send method - this sends a response to the client!  \nlets restart the server and return to the browser and see what happens.  \n**Congratulations**, you created a server!\n\n---\n\n**Nodemon**\nI want to show you a cool npm package named Nodemon that will save us the trouble of pressing ctrl + c and then running again \"node server.js\".  \nOpen your terminal and run the command npm install -g nodemon.  \nThe -g is a flag the tells the computer to install the package globally which means that you can run the command in any project without installing the package again and again.  \nNow, instead of running node server.js you should run nodemon server.js.  \ntry changing something in the server.js, save it, go to the browser and refresh the page.  \nisn't it cool?\n\n---\n\nPC users:  \nIf you are running into a error message saying something like this:\n\n```javascript\nnodemon : File C:\\Users\\yoni\\AppData\\Roaming\\npm\\nodemon.ps1 cannot be loaded because running scripts is disabled on this system.   \nFor more information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.\nAt line:1 char:1\n```\n\nOpen your \"Window PowerShell\" as administrator (You can search for it in the search panel), and run\n\n```javascript\nSet-ExecutionPolicy remotesigned\n```\n\nMac users:  \nIf you running into problems installing the package, try sudo npm install -g nodemon  and enter your mac password.\n\n**Routes**\nNow our users can go to `http://localhost:3000/` but what happens if we having several pages?\nFor instance if we go to ebay.com and click on Electronics we can see the url change to something like this: \"https://il.ebay.com/b/Electronics/bn_7000259124\".  \nThis \"/Electronics\" is a route, lets add one to our app.  \n\n```javascript\napp.get('/', function (request, response) {\n    console.log(\"Someone is coming!\")\n    response.send(\"Wont keep you waiting..\")\n})\n\napp.get('/electronics', function (request, response) {\n    response.send(\"Here will be electronic stuff\")\n})\n\napp.get('/clothes', function (request, response) {\n    response.send(\"Here will be clothes stuff\")\n})\n```\n***The \"base\" / is known as the root route and has no specific name.***\nLets restart our app, go to each of these routes and see what happens.  \nRight now these routes are just returning simple strings (i.e. data), but soon we'll see how to return entire files/directories/json.\n\n---\n\n**Params**\n\nSometimes we need to send information from the client to the server when we make requests.  \nLets try this with sending a private welcome message. \n\n```javascript\napp.get('/landing/:username', function (request, response) {\n    response.send(`Hi there, ${request.params.username}`)\n})\n```\n\nNow go to `http/localhost:3000/landing/\"username\"`.  \n*Switch \"username\" with your own name, this will be what I will write:\n\n```javascript\nhttp/localhost:3000/landing/yonatan\n```\n\nWhat did we do here?\n- We used the request object to access the params (parameters) property, which allows us to access anything the is sent through the route.\n- We used /:username as a placeholder for anything that comes after /landing.\n*Any part of the route that starts with /: will be a variable that has to come in through the route*.  \nParameters that are part of the route (like :/username or :username from above) are required parameters. If you go to /landing/:username without supplying a username, it will not work.\nHowever, we can also accept optional parameters like this:\n```javascript\napp.get('/electronics', (request, response) => {\n    let params = request.query\n    response.send(params)\n})\n```\nThis code allows us to send an optional parameter after electronics like this\n```javascript\n/?{KEY}={VALUE}.\n```\n*It stores the key and value inside an object.*\nWe can add as many parameters as we want in our route. We just need to separate each key-value pair with an ampersand: &.  \nTry this out!\n\n**Serving Files**\nLets see how we can serve files instead of a string or object.  \nTo show how this works, go ahead and create a folder called **dist**, and inside of it add three files:\n- index.html\n- style.css\n- main.js\n\nThe dist folder is a directory that our server will serve to whoever asks.  \nThe name dist is a convention, other known names are client, build, or public.  \nLets add some code to our files for an example of how to serve files.\n\nhtml:\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head><meta charset=\"utf-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><title>Awesome site</title><link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"style.css\" />\n</head>\n\n<body>\n<div onclick=changeColor(this)></div><script src=\"main.js\"></script>\n</body>\n\n</html>\n```\n\n\nstyle.css:\n\n```css\ndiv{\n    width: 100px;\n    height: 100px;\n    background-color: #e67e22;\n    box-shadow: 1px 1px 3px black;\n}\n```\n\nmain.js:\n\n```javascript\nconst changeColor = function (div) {\n    div.style.backgroundColor = \"#3498db\"\n}\n```\n\nserver.js:\n\n```javascript\nconst express = require('express')\nconst path = require('path')\nconst app = express()\n\napp.use(express.static(path.join(__dirname, 'dist')))\n\nconst port = 3000\napp.listen(port, function () {\n    console.log(`Running server on port ${port}`)\n})\n```\nYou can see your first served application if you restart your app and go to localhost:3000.  \nThink you can serve one of your projects using what you learned? go for it!\n\n---\n\n**CRUD**\n\nUp to now, we've only worked with GET requests.\nWe use GET requests (and GET routes) to get or serve information from some server.  \nThis makes sense when working with APIs/simple servers but eventually we'll have data that we want to update/delete in our own databases.\nThat means we need methods not just for GETting data, but also for\n- Creating (POST) data\n- Reading (GET) data\n- Updating (PUT) data\n- Deleting (DELETE) data\nThese four data-related operations are known as CRUD operations."}