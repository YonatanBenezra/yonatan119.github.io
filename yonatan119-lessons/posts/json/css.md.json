{"layout": "post", "title": "css", "published": "Mar 09, 2021", "author": "yonatan119", "tags": "css", "timestamp": 1615296694, "location": "css.md.json", "content": "# *css*\n\nWhat we will learn\n- **Properties**\n- **Selectors**\n- **Specificity**\n- **Display**\n\nfor this lesson we will still use our index.html and style.css.  \nin case you do not have them please got to the files-setup lesson and go over it.\n___\n**Properties**\nProperties is what we use to define which styling to apply to our elements.  \nlets clear the \"body\" in our index.html and insert a simple div inside it, like this:\n\n```html\n  <div>\n  </div>\n```\nnow, open the index.html inside your browser\nyou can do this by writing:\n\n```javascript\nstart index.html\n```\n\ninside your terminal or clicking on ctrl/command+o in the browser and navigating to the index.html.  \nnow we have our div but we cant see it, lets change this using our css.  \ninside your style.css enter this code:\n\n```css\ndiv {\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n}\n```\nWe can see a blue box on our page!\n\n*notice* there is a semicolon (;) at the end of each row. this has to happen in css in order for the code to work.  \nwhat we did is tell the css to change the width, height and background color of all the div's on our page.  \nfor the width and height we use the \"px\" measure (pixels)... we can use other measures such as, % (percentage), em, rem and more. try it out!  \n*in a further lesson we will cover this topic.*\n\nand for the background color we set the color as \"blue\"... we can use other measures such as, hex and RGB.\ntry changing the background-color to a hex setting:\n\n```css\n#e74c3c\n```\n\nand now to a RGB setting:\n\n```css\nrgb(152, 224, 0)\n```\n\nwe have many other properties such as:\nbackground-image, border, border-radius, box-shadow, font-size, font-family, text-align and many more which you can find [here](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference).\n\n___\n**CSS Selectors**\n\nSelectors are a way for our css to understand what element we want to style.  \nwe are going to learn a couple of ways to select the element we want to style.  \nthe first way we have is using the element tag name, as we did above.\nfor example:\n\n```css\ndiv {\n  color: yellow;\n}\n```\n\nafter entering this code into our style.css we will see all our div's text change to yellow.\nso how do we select one specific element?\n___\n**Class and ID Selectors**\n\nby giving the element a class or ID we can easily select a specific element.\nfor instance, if we have a header with the class \"title\":\n```html\n<h1 class=\"title\"></h1>\n```\nwe can style this header using the class name like this:\n\n```css\n.title {\n   font-family: italic;\n}\n```\n\nthe above code will change the font of all the elements with the class name \"title\"  \n*notice the \".\" before our class, if it was an ID it would be a \"#\"  \n*note* it is important to give each element a proper class name or id for easy styling.  \nin case we want to make sure only a specific element and only it will get a certain style we will use an ID selector\nif this is our div's ID attribute:\n\n```html\n<div id=\"my-name\">Yonatan.</div>\n```\nthen this will be our CSS:\n\n```css\n#my-name {\n  color: red;\n}\n```\n\nnotice we are selecting the ID with a \"#\" and not with a \".\"\n\nto sum this:  \nwe will give classes to elements who are in a bigger group of styling, and ID for an element who we want to give specific styling.  \neach element can have both an ID attribute and a class. (it can even have more than one class)\n___\n**Pseudo Selectors**\n\nusing the psuedo selector we can give an html element a special state, for example, if we want our buttons to change color when a mouse hovers over it we can write this in our css:\n\n```css\nbutton:hover {\n  background-color: orange;\n  color: white;\n  border: 1px solid black;\n}\n```\n___\n**Combining Selectors**\n\nWe can combine CSS selectors, lets try to color all of the \"p\" tags inside div's but not ones that are outside of div's.   \nfirst lets write some html to meet the requirements:\n\n```html\n<div>\n  <p>I am inside a div</p>\n  <p>I am inside a div</p>\n</div>\n<p>I am outside of a div</p>\n```\n\nlets add the css with combined selectors:\n\n```css\ndiv p {\n  color: orange\n}\n```\n\nwe can see only the p tags inside of a div were colored!\n[here](https://www.w3schools.com/css/css_combinators.asp) we can find more options of combining selectors.\n___\n**Specificity**\n\nwhat happens if we have this html:\n```html\n<div id=\"container\" class=\"green-text-div\">what color will I be?</div>\n```\n\nand this css:\n\n```css\ndiv {\ncolor: blue;\n}\n.green-text-div {\n  color: green\n}\n#container {\n  color: orange\n}\n```\n\ntry it out and see!\n\nwhy?\nbecause each selector has a level of specificity.\nhere is a list at the least specific:\n\n1. Element Selectors (least specific)\n\n2. Class and Attribute Selectors\n\n3. ID Selectors\n\n4. Chained selectors\n\n5. Inline Stlyes\n\nWe can use a \"style\" attribute in html, like this\n\n```html\n<div style=\"background-color: orange;\" id=\"about\" class=\"about-container\">\n</div>\n```\n\n6. !important  \nthis selector overrides all other styles.\n\n7. position in the File  \nwhen two conflicting style rules have the same specificity, the one that's defined lower down in your CSS file will win.  \nThis rule also applies across multiple files.   \nIf you link several CSS files to your HTML page the links further down the page will be more important.  \n*if one selector is in conflict with another, the one with the highest level of specificity will win. the best practice is using the least specific selectors first.*\n___\n**Display**\n*the difference between block and inline elements.*\n\na block element such as div, h1...\nwill take up the entire width available to it unless specified differently.  \nOn the other hand, if we had an in-line element such as a \"span\" tag, even if we give it a width and height we wont see the \"span\" because an in-line element will be affected only by its content.  \nWe can use the display property like this:\n\n```css\nspan {\n  height: 100px;\n  width: 100px;\n  background-color: orange;\n  display: inline-block;\n}\n```\n\nNow our span element is inline-block and will still take up exactly the space it needs, but our css values take effect\n\nThere are other display values you can explore [here](https://www.w3schools.com/cssref/pr_class_display.asp)\n___\n**Finish!**"}