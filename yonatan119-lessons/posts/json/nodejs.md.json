{"layout": "post", "title": "Node JS", "published": "Mar 23, 2021", "author": "yonatan119", "tags": "node.js, Server-side", "timestamp": 1616506234, "location": "nodejs.md.json", "content": "server-side development.\n\n*Client-side means that the action takes place on the user\u2019s (the client\u2019s) computer.Server-side means that the action takes place on a web server.*\n\nUp until now we talked mostly about the client side (frontend) part of our application with which the user interacts. \nIn the next lesson we will start setting up our backend using Node JS.\n\nIn this lesson we will learn:\n\nWhat Node is\nJS vs. Node\nRunning Node code\nDebugging using VS Code\nModules in Node: exporting and requiring them\n\n**NODE JS**\n\n\nNode.js is another JavaScript runtime environment\nwhich means it's somewhere we can run JS code that's not the browser.\nLets call it Node for simplicity.\n\n*important note: When said writing in node, mostly the meaning is not to write in node but in Javascript in a node environment*\n\nUp until now we wrote frontend code which means we used JS to write code that runs only the client's device (browser).\nNode code is referred to as backend code because the user has virtually zero interaction with it.\nNode allows us to:\n\nCreate servers\nServe data to users\nCommunicate with external APIs\nCommunicate with databases simply\n\nLets understand what clients and servers are including the differences:\n\nClients & Servers\n\n![server-side](client-server.jpg)\nUntil now we've only worked on client code.\n\nIn which the web browser (can be thought of as the client) shows the user beautiful interactive web pages using your HTML, CSS and (client-side) JavaScript files.\n\nThese files Up to now, came directly from our file system, which is why you always saw something like C:/Users/.../index.html in the browser's URL.\n\nBut now we'll learn how to use Node to create servers,\nand those servers will host our files.\nMeaning that *our node servers will serve the client-side of our apps.*\n\nTo make this more clear, this is what happens when you enter a site like ebay.com,\nthe browser is making a GET request to the site's server for you - the browser requests all the HTML, CSS, and JS files necessary to let you shop online!\n\nNode.js is a popular open source and cross platform project on GitHub.\nNode's JavaScript engine is written in C, and is Google's JavaScript engine.\n\nFor the most part, **running JS in node or in the browser is the same** - that is, same syntax, same built-in methods, same objects available to us - **but browser-specific operations are different**.\nIf we get a little more into the technical side, the interpreter (*the interpreter is the part that actually reads our JS code and translates it to computer commands*) doesn\u2019t pause or sleep while waiting for results. The interpreter is available for serving other requests. When one of the results is ready, a callback is invoked.\n\nWe will learn more deeply what a callback is later on.\n\n* **Installing Node**\nThe first step towards using our computer as a server is to install node, lets do that!\n\nIf you do not have Node installed, go ahead and [install it now](https://nodejs.org/en/download/).\n\nTHE NODE SHELL\n\nNode has it's own shell where we can write JavaScript and run it, lets check it out.\nOpen up your terminal (or command-prompt) and type node.\n*make sure you have node installed and you are in a new terminal*\n\nNow, try out writing and running some JavaScript:\n\nright this in:\n\n```javascript\nlet whenDoWeWantToLearnNode = \"now\"\n```\n\n```javascript\nwhenDoWeWantToLearnNode\n```\n\nAs you can probably tell, this is the Node equivalent of working in the browser's console - great place to test out small bits of code, but not much else.\n\nTo exit the shell, type CTRL + C.\n\n* **Running Files with Node**\nexecuting JS code from a file using node.\n\nLets create some dummy JS file, and write code that has some console output in it.\nIt could be a console log, a function call - you call it.\n\nNow, in your terminal - make sure you're in the same directory as your file - then type:\n```javascript\nnode yourFileName.js\n```\nand hit enter.\n\nYou should see your code's output in the terminal.\nthis is certainly a much friendlier way to test your JS code, as opposed to creating an HTML file, connecting it to JS, and running it in the browser.\n\nExercise: Copy the following code into your dummy JS file, run it, and solve the problem. Notice how much easier it is to work with JS in this way!\n\n```javascript\nconst goodies = [\n    { g: \"Chocolate\" },\n    { g: \"Popcorn\" },\n    { g: \"A good movie\" }\n]\n\nfor (let goodie in goodies) {\n    console.log(goodie.g)\n}\n```\n\n* **VS Code & Debugging**\nBut we dont work without our debugger, and Chrome gave us a great tool for that.\n\nif you're using Visual Studio Code, then there's a built-in node debugger!\n\nIn fact, you can run JS code directly in VS Code, and see the results in your own terminal. \n\nAnd it's very simple: just press F5 to run your code - it can take a moment, but shortly after you should see the Debug Console open up with your code results.\n\nNow to actually debug (i.e. stop your code execution and see what's what), click just to the left of the line numbers where you want your code to stop executing. When you hover your mouse over it, you should see a dull red dot appear:\n\nThe dot should turn bright red once you click it.\n\nThen, run your code again ( press F5 ) and you should see a mostly familiar interface:\n\n* **Node JS Modules**\n\nModules in node are similar to regular JS modules we've learned about, but now these work as an actual feature of the environment.\n\nBy that we mean that in node, every file you write is automatically wrapped in a module for you this means that every file in node is a module.\n\nThis is exciting because node allows us to export and import modules from one file to another - this means that we no longer have to rely on our index.html to import everything and allow every piece of our code to be accessible on a global level.\n\nAs an example, create a circleUtils.js file, and add the following code inside:\n\n```javascript\nconst title = \"Circle Utility\";\nconst pi = 3.14159;\n\nconst calcCircleArea = function (radius) {\n  return pi * radius * radius;\n};\n\nmodule.exports.pi = pi;\nmodule.exports.calcCircleArea = calcCircleArea;\n```\n\nwe've defined three variables:\n\nA title - a string\nThe const pi - a number\nThe calcCircleArea function -  which receives a radius and returns the area of a circle\n\nYou didn't think I will leave you hanging withouth explaining about the module.exports right?\nevery node file (i.e. module) has a built in exports object.\nWe can assign new keys to this object in order to export (i.e. expose) them to other files. Without this, no other module could access this piece of code.\n\nTo see what this means, go ahead and create another file called shapesApp.js, and add the following code there:\n\n```javascript\nconst circleUtilities = require('./circleUtils');\nconsole.log(circleUtilities);\n```\n\nTo connect (import) the keys that we exported we will use the require function which takes one argument, a string with a path the file desired.\n\nIn this case, the file desired is in the same directory, so we preface its filename with ./ - notice also that we don't have to write out the .js extension, just the filename is enough.\n\nIf you run the above code (of course, using the node shapesApp.js command in your terminal, or by pressing F5 in VS Code), you'll see the following object in the console:\n\n```javascript\n{ pi: 3.14159, calcCircleArea: [Function] }\n```\n\nYes, circleUtilities is now a plain JS object with two keys:\npi - a number - and calcCircleArea - a method.\n\nHowever, if you try to run any of these inside of shapesApp.js, you'll get an error:\n\n```javascript\nconsole.log(pi)\nconsole.log(title)\nconsole.log(calcCircleArea)\n```\n\nYou'll see an error because these only exist in the scope of the circleUtils module!\nTo access them from shapesApp.js you have to access their values from the circleUtilities object, like so:\n\n```javascript\nconst circleUtilities = require('./circleUtils')\n\nconst r = 4\nconsole.log(`The area of a circle with radius ${r} is ${circleUtilities.calcCircleArea(r)}`)\n//^prints \"The area of a circle with radius 4 is 50.26544\"\n```\n\nJust plain dot notation to access the calcCircleArea method from the circleUtilities object.\n\n*separation of concerns is key.*\nWe have one module, circleUtils which has all the utilities we need for dealing with circles: pi, a function to calculate the area of a circle, and we could add more.\n\nBut the actual usage of these utilties is in another module: shapesApp - this is the module that needs access to everything, so it imports them. Now each module is responsible for its own, separate concern.\n\nSo we use module.exports to export, and require to import. \n*this only works in node, this will not work if you try to run it in the browser.*\n\nOf course, since module.exports is just an object, there's no reason for us to not be able to just assign it more simply, like so:\n\n```javascript\nconst title = \"Circle Utility\";\nconst pi = 3.14159;\n\nconst calcCircleArea = function (radius) {\n  return pi * radius * radius;\n};\n\nmodule.exports = {\n    title: title,\n    pi: pi\n}\n```\n\n* **Global Scope and Node**\n\nIn Node, any variables in the \"global\" scope are assigned to the module of the file unless you explicitly assign them to the module.exports object.\n*which is different from the browser that are variables in the \"global\" scope are assigned the the window object\n\nIf you do not declare a variable with a let or const, it will be assigned to the global scope and will be accessible by any file.\n**doing this can lead to the appearance of bugs which are very hard to find.**\n\nSummary:\nNode is is not a language, or a server but just a JS runtime environment.\nIt gives us the ability to run JS, create servers and make dreams come true.\n\nIf you'd like to know more about what's going on behind the scenes in node, [here's](http://www.c-sharpcorner.com/article/node-js-v8-javascript-engine-day-one/) something with a little more depth.\n\nThis was a very big lesson, the next lessons will be on servers and express,\nmake sure you get back to this lesson if you don't fully understand something or having trouble in this subjects project."}