{"layout": "post", "title": "React", "published": "Nov 22, 2021", "author": "yonatanBenezra", "tags": "react, front-end", "timestamp": 1618936234, "location": "react1.md.json", "content": "**about React**\n- JavaScript library which was written by Facebook in 2013.\n- It speeds up and simplifies the frontend development process.\n- It has many key features that aid in the development of user interfaces, such as:\n  - jsx\n  - components\n  - The virtual DOM (Now we are getting to what we learned)\n___\n**React Components**\nWith React we will break our webpages into chunks called components and write all of their display and logic code all in one. This will increase the modularity of our user interfaces, and we can compose components in infinite combinations and reuse them over and over again.\n\nIn many web pages, you will have similar user interface components over and over again think, for example, of Facebook's like button. It's on posts, videos, and pictures.  \nIf you were using standard HTML, each one of those buttons would need to be \n- written separately\n- given a class to add styling to them\n- have JavaScript code which would need to be written to implement their behaviors.\n- If you needed to update these buttons, the code would likely need to be changed in many places.\n\nReact's component-based architecture saves us the trouble and allows us to reuse that button over and over again and only update code in one place if needed.\n___\n**Installation && Setup**\nFirst, We need Node.js. We have encountered Node.js before in our lessons and project, I will just remind, it is a runtime that allows you to write JavaScript outside the browser. In this case, we'll be using it to make development on our React application as easy as possible.\nEnter your code file and go to the file you would like to create your first React app with, then\nOpen up your command line and run:\n```javascript\nnpx create-react-app color-switcher.\n```\nHeads up, this command may take a few minutes to run.\n\n- npx is a tool that comes with Node that allows you to run commands without installing them first.\n- We are using it to run create-react-app which does what the name implies! It scaffolds a React application for us and sets up Babel and Webpack, two super important tools we'll come back to later in the tutorial.\n- Finally color-switcher is the name of our application, you will need to re-run the npx create-react-app your-app-name command for each app you build.\n\n20 centuries later.. Once your app is created, **`cd`** into the directory that **`create-react-app`** created for us.\n```javascript\ncd color-switcher\n```\n___\n**Create React App Generated Files**\nOpen up the directory in your Text editor (Visual studio code), and check out the files that were created.\nThere are a bunch! But don't be intimidated, let's do a quick run-through of the files create-react-app generated. The ones highlighted are the important ones for us:\n\n- node_modules/ - the Node modules we are using for our project, essentially other people's code that's going to make our life easier.\n- public/\n  - favicon.ico - the icon that shows up when you favorite a site\n  - index.html - the file our JavaScript attaches to\n  - logo.png files - different icons for our app\n  - manifest.json - allows us to make our app into a progressive web app, we won't make our app into one today.\n  - robots.txt - declares the rules for bots on our site\n- src/\n  **- App.css - Where our App component's styling will go**\n  **- App.js - Where our App component will be written**\n  - App.test.js - A file where you can write automated tests for your App component\n  - index.css - A file for global styles for your application\n  **- index.js - Configuration for your React application**\n  - logo.svg - a React logo\n  - serviceWorker.js - code to configure\n  - setupTests.js - configuration for automated testing\n- .gitignore - files you want to keep local and hide from git\n- package.json - holds project metadata\n- package-lock.json - auto-generated file to track dependencies\n*There are a bunch of files created, but we only need to worry about a very few of them.*\n___\n**The index.js File**\nLet's break down what's in the index.js first:\n\n- ***import React from 'react'*** - import the React library, We need this in every file where we use JSX syntax.  \n- ***import ReactDOM from 'react-dom'*** - ReactDOM allows us to use React in the browser.\n- ***import './index.css'*** - apply the global styles.\n- ***import App from './App'*** - import the App component\n\nNow for the important code! We are going to take our **<App>** component and attach it to an element with the id **#root.** You can find that element in the **public/index.html** file.  This allows our React code to actually render on the page.\n\nReact utilizes the virtual DOM, which is a virtual representation of the DOM that you would normally interact within Vanilla JavaScript. This **reactDOM.render** renders this virtual DOM to the actual DOM.  \nBehind the scenes, React does a lot of work to efficiently edit and re-render the DOM when something on the interface needs to change.\n```javascript\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\nThe **<React.StrictMode>** component is a tool that will give you extra warnings about issues that may exist in your code.  \nAgain, we'll just ignore the service worker code, it goes above and beyond what we need to do.  \nYou don't need to change anything in the index.js file, I just wanted to run through it since it is so key to making our application work.\n___\n**A React Hello World**\nNow for the fun part, writing the code! Open up your **App.js** file. This will be our top-level, or root, component for our application.\n\nInside that file we already have some code written. We are again importing\n- React (which we need to do in every file that we use React in)\n- the React logo\n- the CSS file specific to this App component.  \nWe also have a function, **App** that returns a bunch of what looks like HTML -- this is actually **JSX**!\nFinally, we are exporting the component so we can import it into other files, in this case, our **index.js** that was generated for us.\n\nLet's go ahead and remove the logo import and change the JSX code so that it only returns\n```javascript\n<h1>Hello, World</h1>\nimport React from 'react'\n- import logo from './logo.svg'\nimport './App.css'\n\nfunction App () {\n  return (\n+ <h1>Hello world!</h1>\n  )\n}\n\nexport default App\n```\nJSX is an extension of JavaScript that allows you to write what looks like HTML directly in your JavaScript code.  \nYou can't natively use JSX in the browser, but we will use a library called Babel to transpile (or convert) our JSX into regular JavaScript so that the browser can understand it.  \nJSX is actually optional in React, but you'll see it used in the vast majority of cases.\n\nOkay, now you've written your first React code, but how do you see the output? Go back to your CLI and run:\n```javascript\nnpm run start\n```\nA webpage should pop up that displays your React app.  \nIt will hot reload, so every time you change your code and save those changes, your application will show those changes automatically.  \nIn order to exit out of the server, you can press **ctrl + c**. It may be helpful to have two terminal windows or tabs open while you're developing React apps because you can't write additional commands in the session where the server is running.\n\n**React Color Switcher**\nFirst, we're going to build a color picker application -- the background of the page will change color based on a button the user selects.\n\n![](https://res.cloudinary.com/practicaldev/image/fetch/s--7JVh9WP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yyjx3l6mblvdstncxknz.gif)\n\nThe first step is to build out the static user interface, this is how we will do it:\n- we'll add an enclosing **div** which will be the top-level element of our React application.\n- we'll add another **div** inside of that one that will allow our content to be centered on the page.  \n- We'll add a header to title our page and three buttons. \n- We are going to add some **className** attributes to our elements.\n*In JavaScript, a **class** is for creating classes in object-oriented programming, so, React can't use the word **class**, to add class names for styling groups of elements. So, it uses **className** instead.*\n\nWe will add the following **classNames** to our elements:\n```javascript\nimport React from 'react'\nimport './App.css'\n\nfunction App () {\n  return (\n    <div className='react-root'>\n      <div className='centered'>\n        <h1>Color Picker</h1>\n        <button className='red'>red</button>\n        <button className='blue'>blue</button>\n        <button className='yellow'>yellow</button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n```\nSince this tutorial is focused on React, we'll just copy some CSS code into your App.css. Remove what's in there and replace it with:\n```css\nhtml, body, #root, .react-root {\n  height: 100%;\n  width: 100%;\n  background-color: white;\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.centered {\n  text-align: center;\n}\n\nbutton {\n  padding: 10px;\n  margin: 5px;\n  border: 2px solid white;\n  color: white;\n  font-size: 20px;\n}\n\n.red {\n  background-color: red;\n  color: white;\n}\n\n.blue {\n  background-color: blue;\n  color: white;\n}\n\n.yellow {\n  background-color: yellow;\n  color: black;\n}\n```\nNow, your app should look like [this](https://res.cloudinary.com/practicaldev/image/fetch/s--9pbdqf6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/complete-beginners-guide-react-2020/color-picker.png):\n\nNow we need to actually make it do something!\nAny variables we want to have changed while our application is running need to be stored in state.  \nThis will cause React to automatically update our component's appearance each time a state variable updates.\n___\n**React State**\nIn order to utilize state, we will import the **useState** hook from React.  \nIn our App.js component, we will update our first line of code.\n```javascript\n+ import React, { useState } from 'react'\nimport './App.css'\n```\n*Every time there is a line with a \"+\" before, it means this line is the line we added.*\nThe **useState** hook takes one argument: what the initial value of state will be and it then returns two values in an array: \n- The first is the value of the state variable\n- The second is a function that will allow us to update state.  \nWe will use array destructuring to set both of the items returned to their own variables.\n```javascript\nimport React, { useState } from 'react'\nimport './App.css'\n\nfunction App () {\n+ const [color, setColor] = useState('')\n  return (\n    <div className='react-root'>\n      <div className='centered'>\n        <h1>Color Picker</h1>\n        <button className='red'>red</button>\n        <button className='blue'>blue</button>\n        <button className='yellow'>yellow</button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n```\n\nIf you console log each item, you'll see **color** is an empty string because we provided useState the argument ''.  \nIf you changed that empty string to 'blue' then color will then store the value blue!  \n**setColor** is a function, which we will use to update the color variable.  \nNow, lets add an event listener so that when a user clicks on our buttons, the color stored in state updates.\n- We will display the current value of **color** on the interface. \n  - We can do this by writing the color variable in curly braces, this tells React that any code inside the curly braces is JavaScript code.\n- We will add an onClick attribute to our first button\n- after that onClick we will add a function that will run when the event fires. This is how we write event listeners in React.\n  - For now, we will just **console.log('clicked')**.\n\n```javascript\nimport React, { useState } from 'react'\nimport './App.css'\n\nfunction App () {\n  const [color, setColor] = useState('')\n  return (\n    <div className='react-root'>\n      <div className='centered'>\n        <h1>Color Picker</h1>\n+ {color}\n+ <button className='red' onClick={() => console.log('clicked')}>\n          red\n        </button>\n        <button className='blue'>blue</button>\n        <button className='yellow'>yellow</button>\n      </div>\n    </div>\n  )\n}\nexport default App\n```\n\nCheck out your JavaScript console and see what's happening!  \nNow we'll change the event listener function to instead change the color state variable.  \nWe can do so by using the **setColor** function that **useState** gave us.\n```javascript\n<button className='red' onClick={() => setColor('red')}>\n  red\n</button>\n```\nNow, you can see that when you click on the button the word \"red\" displays on the page! Now let's make both of the other buttons work as well.\n```javascript\n<button className='blue' onClick={() => setColor('blue')}>blue</button>\n<button className='yellow' onClick={() => setColor('yellow')}>yellow</button>\n```\nThe last thing that we need to do is actually change the color of the page instead of just displaying the color's name on the page.  \nIn our CSS file, we already have three classes for our colors \n- yellow\n- red\n- blue.\nWhat we need to do is add those classes onto our **react-root** element so that it changes color to match our **color** variable.  \nWe need to make our className take JavaScript code instead of just a string, and then we will use string interpolation to add our **color** class to the element.\n```javascript\n<div className={`react-root ${color}`}>\n```\nOur final code should look like this:\n```javascript\nimport React, { useState } from 'react'\nimport './App.css'\n\nfunction App () {\n  const [color, setColor] = useState('')\n\n  return (\n    <div className={`react-root ${color}`}>\n      <div className='centered'>\n        <h1>Color Picker</h1>\n        <button className='red' onClick={() => setColor('red')}>red</button>\n        <button className='blue' onClick={() => setColor('blue')}>blue</button>\n        <button className='yellow' onClick={() => setColor('yellow')}>yellow</button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n```\n\n**React Props**\nNow we've used some of React's most important features: JSX and state.  \nThere are two more that I want to show you: components and props.\n\nRight now we are actually using a component: **App**. But, we want to make our components small and reusable. Right now, our buttons follow a pattern.  \nEach one:\n- displays text\n- has a className\n- has an onClick event.  \nWe will make a second **ColorChangeButton** component so that we can reuse as much code as possible, and if we want to update the buttons in the future we can do so more easily.\n\nThe first step is to create another file in your **src/** folder called **ColorChangeButton.js**.  \nNow, we will create a second React component in this file.\n```javascript\n// ColorChangeButton.js\nimport React from 'react'\n\nfunction ColorChangeButton () {\n  return (\n    <button>Hi!</button>\n  )\n}\n\nexport default ColorChangeButton\n```\nWe'll now go back to our App.js and import our **ColorChangeButton**:\n```javascript\n// App.js\n\nimport React, { useState } from 'react'\nimport './App.css'\n+ import ColorChangeButton from './ColorChangeButton'\n```\nIn our JSX code, we will create three instances of our **ColorChangeButton**.\n```javascript\n // App.js\n  return (\n    <div className={`react-root ${color}`}>\n      <div className='centered'>\n        <h1>Color Picker</h1>\n+ <ColorChangeButton />\n+ <ColorChangeButton />\n+ <ColorChangeButton />\n        <button className='red' onClick={() => setColor('red')}>red</button>\n        <button className='blue' onClick={() => setColor('blue')}>blue</button>\n        <button className='yellow' onClick={() => setColor('yellow')}>yellow</button>\n      </div>\n    </div>\n  )\n  ```\nBoom! Now you should have three more buttons that show up on the page that all say Hi!. This is how we create and include a second component in React.  \nBut, right now our components are pretty boring, they all say the same thing.  \nWe want these to eventually replace the three color-changing buttons we have written, so we need to allow our button to be a different color and to have different text.  \nReact uses unidirectional data flow, which means we can only pass data from a parent component to a child component. We will use **props** to pass data from one component to another.\n```javascript\n // App.js\n  return (\n    <div className={`react-root ${color}`}>\n      <div className='centered'>\n        <h1>Color Picker</h1>\n+ <ColorChangeButton color='red' />\n+ <ColorChangeButton color='blue' />\n+ <ColorChangeButton color='yellow' />\n        <button className='red' onClick={() => setColor('red')}>red</button>\n        <button className='blue' onClick={() => setColor('blue')}>blue</button>\n        <button className='yellow' onClick={() => setColor('yellow')}>yellow</button>\n      </div>\n    </div>\n  )\n  ```\nIn our parent component, App, we can use what looks like an HTML attribute to send props. In this case, color is the name of our prop and then the value comes after the equals sign, 'red' for the first component, 'blue' for the second, and 'yellow' for the third.\n\nNow, we need to use those props in our child component. Switch over to **ColorChangeButton.js**. First, we will make our function take the parameter props.\n```javascript\n// ColorChangeButton.js\nfunction ColorChangeButton (props) {\n  ...\n}\n```\nThen, you can **console.log** props before the return to see what's there:\n\n**{ color: 'red' }{ color: 'blue' }{ color: 'yellow' }**\n\nIt's an object! React combines each prop we send from the parent component into an object with each key and value in the child. So, to access our color in our child component, we would do **props.color**. Let's make our button display our color as its text and also add the color as a class to the button so that the correct color displays.\n```javascript\n// ColorChangeButton.js\nimport React from 'react'\n\nfunction ColorChangeButton (props) {\n  return (\n+ <button className={props.color}>{props.color}</button>\n  )\n}\n\nexport default ColorChangeButton\n```\nNow our buttons look the way they are supposed to! The last thing that we need to do is make the click event work. In our App.js, we wrote this code to change the current color:\n```javascript\n<button className='red' onClick={() => setColor('red')}>red</button>\n```\nThe one issue we have is that **setColor** is defined in our **App** component, so we don't have access to it **ColorChangeButton**.  \nGood news though: we have a way to pass data from a parent component to a child component that we learned in the past step: props!  \nLet's pass the **setColor** function down as a prop to our **ColorChangeButton** component.  \nI'm also going to delete our three original buttons since we no longer need them.\n```javascript\n // App.js\n  return (\n    <div className={`react-root ${color}`}>\n      <div className='centered'>\n        <h1>Color Picker</h1>\n+ <ColorChangeButton color='red' setColor={setColor} />\n+ <ColorChangeButton color='blue' setColor={setColor} />\n+ <ColorChangeButton color='yellow' setColor={setColor} />\n      </div>\n    </div>\n  )\n  ```\nNow, if you go back to the **ColorChangeButton** and console.log what the props are, you'll see that you have a second item in the object, for example:\n```javascript\n{\n  color: \"red\"\n  setColor: \u0192 ()\n}\n```\nLet's use that setColor function:\n```javascript\nfunction ColorChangeButton(props) {\n  return (\n+ <button className={props.color} onClick={() => props.setColor(props.color)}>\n      {props.color}\n    </button>\n  )\n}\n\nexport default ColorChangeButton\n```\nNow each button should work as expected! This pattern of passing the state change function down from parent to child components is called inverse data flow.  \nIt allows us to circumvent the unidirectional data flow nature of React.\n\n**You know react! come on, what are you waiting for? do projects, projects, projects!**\n*I hope you saw modern family, if you didn't, you didn't get the joke and its just awkward*"}
