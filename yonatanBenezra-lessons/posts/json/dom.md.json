{"layout": "post", "title": "Dom", "published": "Nov 08, 2021", "author": "yonatanBenezra", "tags": "Dom", "timestamp": 1617107434, "location": "dom.md.json", "content": "In the next lesson we are going to talk about the DOM and the virtual DOM\nthis will help us understand one of the reasons to use REACT.\n\nthere are 2 things you need to have a basic understanding in before reading this lesson\n\n1. what is an api:\n*API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.  \nEach time you use an app like Facebook, send an instant message, or check the weather on your phone, you\u2019re using an API.*\n\n2. what is a node:\n*A node is a basic unit of a data structure, such as a linked list or tree data structure.  \nNodes contain data and also may link to other nodes*\n___\n**DOM**\n\nJust to get things straight - DOM stands for Document Object Model and is an abstraction of a structured text.  \nFor web developers, this text is an HTML code, and the DOM is simply called HTML DOM.  Elements of HTML become nodes in the DOM.  \nSo, while HTML is a text, the DOM is an in-memory representation of this text.  \n*Compare it to a process being an instance of a program.  \nYou can have multiple processes of the same one program, just like you can have multiple DOMs of the same HTML (e.g. the same page loaded on many tabs).*\n\nThe HTML DOM provides an interface (API) to traverse and modify the nodes.  \nIt contains methods like getElementById or removeChild. We usually use JavaScript language to work with the DOM, because\u2026 Well, nobody knows why :).  \nSo, whenever we want to dynamicly change the content of the web page, we modify the DOM.\n___\n**Issues**  \nThe HTML DOM is always tree-structured - which is allowed by the structure of HTML document.  \nThis is cool because we can traverse trees fairly easily.  Unfortunately, easily doesn\u2019t mean quickly here.\n\nThe DOM trees are huge nowadays.  \nSince we are more and more pushed towards dynamic web apps (Single Page Applications - SPAs), we need to modify the DOM tree incessantly and a lot.  \nAnd this is a real performance and development pain.\nConsider a DOM made of thousands of divs.  \nRemember, we are modern web developers, our app is very SPA! We have lots of methods that handle events - clicks, submits, type-ins\u2026\n\nThis has two problems:\n1. It\u2019s hard to manage. Imagine that you have to tweak an event handler.  \nIf you lost the context, you have to dive really deep into the code to even know what\u2019s going on.  \nBoth time-consuming and bug-risky.\n\n2. it\u2019s inefficient. Do we really need to do all this findings manually?  \nMaybe we can be smarter and tell in advance which nodes are to-be-updated?\n\nReact comes with a helping hand.  \nThe solution to problem 1 is declarativeness.  \nInstead of low-level techniques like traversing the DOM tree manually, you simple declare how a component should look like.  \nReact does the low-level job for you - the HTML DOM API methods are called under the hood. React doesn\u2019t want you to worry about it - eventually, the component will look like it should.  \nBut this doesn\u2019t solve the performance issue. And this is exactly where the Virtual DOM comes into action.\n___\n**Virtual DOM**  \nFirst of all - the Virtual DOM was not invented by React, but React uses it and provides it for free.\n\nThe Virtual DOM is an abstraction of the HTML DOM.  \nIt is lightweight and detached from the browser-specific implementation details.  \nSince the DOM itself was already an abstraction, the virtual DOM is, in fact, an abstraction of an abstraction.    \nPerhaps it\u2019s better to think of the virtual DOM as React\u2019s local and simplified copy of the HTML DOM.  \nIt allows React to do its computations within this abstract world and skip the \u201creal\u201d DOM operations, often slow and browser-specific.  \nThere\u2019s no big difference between the \u201cregular\u201d DOM and the virtual DOM. This is why the JSX parts of the React code can look almost like pure HTML:\n\n```jsx\nconst CommentBox = () => {\n    return (\n      <div className=\"commentBox\">\n        Hello, world! I am a CommentBox.\n      </div>\n    )\n};\n```\n\nIn most cases, when you have an HTML code and you want to make it a static React component, all you have to do is:\n\n* [X] Return the HTML code.\n* [X] Replace class attribute name to className - because class is a reserved word in JavaScript.\n\nThere are more differences which we will learn about in the future lessons.\n\nYou are a step close to start using REACT!\nin the next lesson we will learn about the Server-side before we continue to react.\n\n**Good luck!**"}
